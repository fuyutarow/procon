# Path to the test file (Liquid template)
#
# Variables:
#
# - `manifest_dir`: Package directory
# - `contest`:      Contest ID (e.g. "abc100")
# - `bin_name`:     Name of a `bin` target (e.g. "abc100-a")
# - `bin_alias`:    "Alias" for a `bin` target defined in `pacakge.metadata.cargo-compete` (e.g. "a")
# - `problem`:      Alias for `bin_alias` (deprecated)
#
# Additional filters:
#
# - `kebabcase`: Convert to kebab case (by using the `heck` crate)
test-suite = "{{ manifest_dir }}/testcases/{{ bin_alias }}.yml"

# Open files with the command (`jq` command that outputs `string[] | string[][]`)
#
# VSCode:
#open = '[["code", "-a", .manifest_dir], ["code"] + (.paths | map([.src, .test_suite]) | flatten)]'
# Emacs:
#open = '["emacsclient", "-n"] + (.paths | map([.src, .test_suite]) | flatten)'

[template]
src = '''
#![allow(
    dead_code,
    unused_imports,
    unused_macros,
    non_snake_case,
    non_camel_case_types
)]

use itertools::{Combinations, Itertools};
use num::integer::gcd;
use petgraph::{algo::kosaraju_scc as scc, graph::NodeIndex, Directed, Graph};
use proconio::{
    fastout, input,
    marker::{Chars, Usize1},
};
use std::cmp::{max as _max, min as _min, Reverse};
use std::collections::{BTreeMap, BTreeSet, BinaryHeap, HashMap, HashSet, VecDeque};
use std::f64::consts::PI;
use std::i32::MAX as inf;
use std::mem::swap;
const TAU: f64 = PI * 2.;

#[cfg_attr(cargo_equip, cargo_equip::equip)]
use ac_library_rs::{floor_sum, Dsu, MfGraph, ModInt1000000007, ModInt998244353};
#[cfg_attr(cargo_equip, cargo_equip::equip)]
use alds_lib::{
    chmax, chmin,
    collections::{Counter, FenwickTree, MultiSet, Segtree},
    max, min,
    monoid::{Max, Min, Monoid, Product, Sum},
};
use utils::debug;

#[fastout]
fn main() {
    input! {
        N: usize,
        mut S: Chars,
        A: [Usize1; N],
        ts: [(i32, i32); N],
    }
}

mod utils {
    macro_rules! debug {
        ($($a:expr),* $(,)*) => {
            #[cfg(debug_assertions)]
            eprintln!(concat!($("| ", stringify!($a), "={:?} "),*, "|"), $(&$a),*);
        };
    }
    pub(crate) use debug;
}
'''

[template.new]
edition = "2018"
# `profile` for `Cargo.toml`.
#
# By setting this, you can run tests with `opt-level=3` while enabling `debug-assertions` and `overflow-checks`.
dependencies = '''
# alga = "=0.9.3"
# ascii = "=1.0.0"
# bitset-fixed = "=0.1.0"
# either = "=1.5.3"
# fixedbitset = "=0.2.0"
# getrandom = "=0.1.14"
# im-rc = "=14.3.0"
# indexmap = "=1.3.2"
itertools = "=0.9.0"
itertools-num = "=0.1.3"
lazy_static = "=1.4.0"
# libm = "=0.2.1"
# maplit = "=1.0.2"
# nalgebra = "=0.20.0"
# ndarray = "=0.13.0"
num = "=0.2.1"
num-bigint = "=0.2.6"
num-complex = "=0.2.4"
num-derive = "=0.3.0"
num-integer = "=0.1.42"
num-iter = "=0.1.40"
num-rational = "=0.2.4"
num-traits = "=0.2.11"
ordered-float = "=1.0.2"
# permutohedron = "=0.2.4"
petgraph = "=0.5.0"
proconio = {version = "=0.3.6", features = ["derive"]}
rand = {version = "=0.7.3", features = ["small_rng"]}
# rand_chacha = "=0.2.2"
# rand_core = "=0.5.1"
# rand_distr = "=0.2.2"
# rand_hc = "=0.2.0"
# rand_pcg = "=0.2.1"
# regex = "=1.3.6"
# superslice = "=1.0.0"
# text_io = "=0.1.8"
# whiteread = "=0.5.0"
# rustc-hash = "=1.1.0"
# smallvec = "=1.2.0"

ac-library-rs-parted = {git = "https://github.com/qryxip/ac-library-rs-parted"}
alds-lib = {path = "../../alds-lib"}
'''

profile = '''
[dev]
opt-level = 3
'''

[template.new.copy-files]
"./template-cargo-lock.toml" = "Cargo.lock"

[new]
kind = "cargo-compete"
# Platform
#
# - atcoder
# - codeforces
# - yukicoder
platform = "atcoder"
# Path (Liquid template)
#
# Variables:
#
# - `contest`:      Contest ID. **May be nil**
# - `package_name`: Package name
path = "./{{ contest }}"

#[new]
#kind = "oj-api"
#url = "https://atcoder.jp/contests/{{ id }}"
#path = "./{{ contest }}"

# for Library-Checker
#[add]
#url = "https://judge.yosupo.jp/problem/{{ args[0] }}"
##is-contest = ["false"] # optional
#bin-name = '{{ args[0] }}'
##bin-alias = '{{ args[0] }}' # optional
##bin-src-path = './src/bin/{{ bin_alias }}.rs' # optional

# for yukicoder
#[add]
#url = '{% case args[0] %}{% when "contest" %}https://yukicoder.me/contests/{{ args[1] }}{% when "problem" %}https://yukicoder.me/problems/no/{{ args[1] }}{% endcase %}'
#is-contest = ["bash", "-c", '[[ $(cut -d / -f 4) == "contests" ]]'] # optional
#bin-name = '{% assign segments = url | split: "/" %}{{ segments[5] }}'
##bin-alias = '{% assign segments = url | split: "/" %}{{ segments[5] }}' # optional
##bin-src-path = './src/bin/{{ bin_alias }}.rs' # optional

[test]
# Profile for `cargo build`. ("dev" | "release")
#
# Defaults to `"dev"`.
#profile = "dev"

[submit.transpile]
# https://github.com/qryxip/cargo-equip/issues/102#issuecomment-826520630
args = [
  "cargo",
  "equip",
  "--exclude-atcoder-crates", # proconioなどを無視 
  "--resolve-cfgs", # #[cfg(…)]を解決
  "--remove",
  "docs", # doc commentを除去
  "--minify",
  "libs", # ライブラリクレートの各展開結果をそれぞれ一行にminify
  "--rustfmt", # 最終的な生成物にrustfmtをかける
  "--check", # 最終的な生成物がちゃんとコンパイルできるかチェック
  "--bin",
  "{{ bin_name }}",
]
kind = "command"
